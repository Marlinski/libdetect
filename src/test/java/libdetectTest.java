/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class libdetectTest {

    private static final int TEST_PORT = 9999;
    int resultPort = -1;
    int lostPort = -1;

    /**
     * This test assumes that nothing else local to the machine the test is run on is listening on TEST_PORT or
     * TEST_PORT + 1. The test will start a TCP server on TEST_PORT, then the discovery event should fire. It should not
     * fire for TEST_PORT + 1 because nothing will be listening on there.
     */
    @Test public void libdetectBasic() throws Exception {
        LibDetect libdetectTest = new LibDetect();

        libdetectTest.start(TEST_PORT, new ActionListener() {
            @Override
            public void onPeerReachable(PeerReachable peer) {
                resultPort = TEST_PORT;
            }

            @Override
            public void onPeerUnreachable(PeerUnreachable peer) {
                lostPort = TEST_PORT;
            }
        }, false);

        libdetectTest.start(TEST_PORT + 1, new ActionListener() {
            @Override
            public void onPeerReachable(PeerReachable peer) {
                resultPort = TEST_PORT + 1;
            }

            @Override
            public void onPeerUnreachable(PeerUnreachable peer) {
                lostPort = TEST_PORT + 1;
            }
        }, false);

        ServerSocket s = new ServerSocket(TEST_PORT);
        s.accept();

        //need to give it some time to do the callback before checking
        Thread.sleep(500);

        assert(resultPort == TEST_PORT);
        s.close();

        //need to give it some time to do the callback before checking
        Thread.sleep(500);
        assert(lostPort == TEST_PORT);

        assert(resultPort != TEST_PORT + 1);

        assert(lostPort != TEST_PORT +1);

        libdetectTest.stop(TEST_PORT);
        libdetectTest.stop(TEST_PORT +1);

    }
}
